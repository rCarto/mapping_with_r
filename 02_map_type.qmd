---
knitr:
  opts_chunk: 
    collapse: false
    comment: "#>" 
    fig.height: 8 
    fig.width: 8
    cache: true
---


# Map types

`mf_map()` displays map layers on a georeferenced plot. It has three main arguments:

- `x`, an `sf` object
-  `var`, the name(s) of a variable(s) to map
-  `type`, the map layer type


## Example dataset

The following code imports relevant layers from the [geopackage](https://www.geopackage.org/) file **lot46.gpkg**.

```{r}
library(sf)
# import municipalities
com <- st_read("data/lot46.gpkg", layer = "commune", quiet = TRUE)
# import departments
dep <- st_read("data/lot46.gpkg", layer = "departement", quiet = TRUE)
# import restaurants
resto <- st_read("data/lot46.gpkg", layer = "restaurant", quiet = TRUE)
# import roads
route <- st_read("data/lot46.gpkg", layer = "route", quiet = TRUE)
```


## Plot a base map

`mf_map(x, type = "base")` displays `sf` objects geometries. 

```{r mf_base}
library(mapsf)
# Municipalities
mf_map(x = com, border = "white")
mf_map(x = dep, lwd = 2, col = NA, add = TRUE)
mf_map(x = route, lwd = .5, col = "ivory4", add = TRUE)
mf_map(x = resto, pch = 20, cex = .7, col = "darkred", add = TRUE)
```


## Proportional Symbols

`mf_map(x, var, type = "prop")` displays symbols with areas proportional to a quantitative variable (stocks). The `inches` argument is used to customize the symbols sizes.

```{r proportional_symbols}
# Municipalities
mf_map(x = com)
# Proportional Symbols
mf_map(
  x = com, 
  var = "POPULATION",
  type = "prop",
  leg_title = "Total population\n(2015)"
)
# Title
mf_title("Population distribution in the Lot department")
```


## Choropleth Map

In choropleth maps, areas are shaded according to the variation of a relative quantitative variable. They are used to represent ratios or indices.  
`mf_map(x, var, type = "choro")` displays choropleth maps . Arguments `nbreaks`, and `breaks` allow to customize the variable classification. 



```{r choro}
# Population density
com$DENS <- 1e6 * com$POP / as.numeric(st_area(com))
mf_map(
  x = com,
  var = "DENS",
  type = "choro",
  breaks = "quantile",
  pal = "Dark Mint",
  lwd = 1,
  leg_title = "Population density\n(inh. per km2)", 
  leg_val_rnd = 0
)
mf_title("Population distribution in the Lot department")
```



### Color palettes {#palettes}

Colors palettes, defined with `pal`, can be created with `mf_get_pal()` or you can use palette names from `hcl.pals()`.

```{r pal1}
mf_map(x = com, var = "DENS", type = "choro",
       breaks = "quantile", nbreaks = 4, pal = "Mako")
```

![](img/swatch-plot-1.svg)

`mf_get_pal()` builds sequential, diverging and qualitative color palettes. Diverging color palettes can be dissymmetric (different number of colors in each of the two gradients).

```{r pal2,  fig.height=3, nm=TRUE}
mypal <- mf_get_pal(n = c(6,3), palette = c("Burg", "Teal"))
image(1:9, 1, as.matrix(1:9), col=mypal, xlab = "", ylab = "", xaxt = "n",
      yaxt = "n",bty = "n")
```

### Data classification (or discretization)
`mf_get_breaks()` allows to classify data outside of the function itself. 


```{r}
#| fig-height: 8
x <- com$DENS
summary(x)
sd(x)
htitle <- "Population density distribution"
hlab <- "inh. per km2"
opar <- par(mar = c(5.1,2.1,2.1,2.1), mfrow = c(3,1))
hist(
  x = x, 
  n = 25,
  main = htitle, 
  xlab = hlab,
  freq = FALSE
)
boxplot(x, horizontal = T)
stripchart(
  x = x,
  method = "jitter", 
  pch = 21,
  bg = "red", 
  col = "white",
  cex = .9
)
```


This distribution is highly skewed to the left. The geometric progression method is well suited in this case. 

```{r}
#| fig-height: 6
bks <- mf_get_breaks(
  x = x, 
  nbreaks = 6, 
  breaks = "geom"
) 
cols <- mf_get_pal(
  n = 6, 
  palette = "SunsetDark",
  rev = TRUE
)
par(mfrow = c(1,1))
hist(
  x = x, 
  breaks = bks, 
  col = cols, 
  xlab = hlab, 
  freq = F, 
  axes = FALSE, 
  ylab = "",
  main = htitle, 
  border = "grey80", 
  lwd = 3, 
  ylim = c(-0.01, 0.03), 
  xlim = c(0,600)
)
stripchart(
  x = x, 
  pch = 21,
  bg = "grey20", 
  col = "white",
  at = -0.005, 
  jitter = 0.0025, 
  add = TRUE,
  method = "jitter", 
  cex = .7,
  xlab = ""
)
axis(side = 1, at = seq(0,600,100))
points(x = bks, y = rep(0, length(bks)), pch = "|")
par(opar)
```

```{r}
mf_map(
  x = com,
  var = "DENS",
  type = "choro",
  breaks = bks,
  pal = cols,
  lwd = 1,
  leg_title = "Population density\n(inh. per km2)", 
  leg_val_rnd = 0
)
mf_title("Population distribution in the Lot department")
```



## Typology Map

`mf_map(x, var, type = "typo")` displays a typology map of a qualitative variable. 

```{r typo_simple}
mf_map(
  x = com,
  var = "STATUT",
  type = "typo",
  pal = c("aquamarine4", "yellow3","wheat"),
  lwd = .7,
  leg_title = ""
)
mf_title("Municipality status")
```


`val_order` can be used to set the modalities order in the legend.

```{r typo_order}
mf_map(
  x = com,
  var="STATUT",
  type = "typo",
  pal = c("aquamarine4", "yellow3","wheat"),
  val_order = c("Préfecture", "Sous-préfecture", "Commune simple"),
  lwd = .7,
  leg_title = ""
)
mf_title("Municipality status")
```



## Proportional Symbols using Choropleth Coloration

`mf_map(x, var, type = "prop_choro")` creates a map of symbols that are proportional to values of a first variable and colored to reflect the classification of a second variable.


```{r choroprop}
mf_map(x = com)
mf_map(
  x = com,
  var = c("POPULATION", "DENS"),
  type = "prop_choro",
  border = "grey50",
  lwd = 1,
  leg_pos = c("topright", "topleft"),
  leg_title = c("Population", "Population density\n(inh. per km2)"), 
  breaks = "q6",
  pal = "Magenta",
  leg_val_rnd = c(0,1))
mf_title("Population")
```

## Proportional Symbols using Typology Coloration

`mf_map(x, var, type = "prop_typo")` creates a map of symbols that are proportional to values of a first variable and colored to reflect the modalities of a second qualitative variable.

```{r typoprop}
mf_map(x = com)
mf_map(
  x = com,
  var = c("POPULATION", "STATUT"),
  type = "prop_typo",
  pal = c("aquamarine4", "yellow3","wheat"),
  val_order = c("Préfecture", "Sous-préfecture", "Commune simple"),
  leg_pos = c("bottomleft","topleft"),
  leg_title = c("Population\n(2015)",
                "Municipality status"),
)
mf_title("Population")
```

## Exercice

The **khm** project contain a toy dataset on Cambodia. You have to download and unzip it.   

[Download the project](khm.zip){.btn .btn-primary .btn-sm role="button"}  

You can then open the project and do the exercise in it.


1. Import the **khm** layer from the geopackage file **data/khm.gpkg**.  
This is a layer of Cambodian municipalities and districts (ADM2 level). **F_TL**, **M_TL** and **T_TL** are respectively female population, male population and total population (year of reference 2016). **ADM1_EN** is the name of provinces (ADM1 level) of belonging of municipalities and districts. 

2. Plot a map of Cambodia municipalities and districts.    
Municipalities and districts should be grey with a thin red border.  

3. Create a map of population (**T_TL**).  
Display the legend in the top right corner of the map within a frame. 

4. Create a map of municipalities and districts indicating their province of belonging (**ADM1_EN** variable).  
Do not display any legend.

5. Combine total population and province of belonging on the same map.

6. Compute the population density for municipalities and districts and create a map of the population density. 
